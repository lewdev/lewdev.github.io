const USER_CONFIG_REF="extext-config";const LAYOUTS="Vertical, Horiz, Screen, Editor".split(", ");const [Vertical,Horiz,Screen,Editor]=LAYOUTS;const LAYOUT_EMOJIS=["↕️","↔️","\ud83d\udcbb","\ud83e\uddd1‍\ud83d\udcbb"];let userConfig={useHorizLayout:false,layout:Vertical,content:""};
onload=()=>{let storedConfig=localStorage.getItem(USER_CONFIG_REF);if(storedConfig)userConfig=JSON.parse(storedConfig);const {content,layout}=userConfig;editor.setValue(content);document.body.className=layout||Vertical;if(location.href.includes("#key-shortcuts"))renderKeyShortcuts();renderLayoutBtn(LAYOUTS.findIndex(a=>a===(layout||Vertical)))};
const runCode=()=>{const content=editor.getValue();editor.setValue(content.replace(/\t/g,"  "));userConfig.content=content;localStorage.setItem(USER_CONFIG_REF,JSON.stringify(userConfig));f.srcdoc=content};const capCamel=s=>s.charAt(0).toUpperCase()+s.substring(1).split(/(?=[A-Z])/).join` `;
const mapToTableRows=(map,isSublime)=>Object.keys(map).map(key=>{const val=map[key];const action=val===runCode?"Run code":val===showKeyShortcuts?"Show Key Shortcuts":capCamel(val);const isOverridden=isSublime&&editor.options.extraKeys[key];return`<tr><td>${key}</td><td>${action}${isOverridden?" <span class='overridden'>(overridden)</span>":""}</td></tr>`}).join("");
const renderKeyShortcuts=()=>{const keyShortcutsTable=document.querySelector(".modal-window > div > .modal-content");keyShortcutsTable.innerHTML=`<table class="keyshortcuts-table"><thead><tr><th>Keys</th><th>Action</th></tr></thead>
    <tbody>
      ${mapToTableRows(editor.options.extraKeys)}
      <tr><th colspan="2" style="padding-top:.5rem">Sublime Keyshortcuts</th></tr>
      ${mapToTableRows(CodeMirror.keyMap.sublime,true)}
    </tbody>
  </table>`};keyShortcuts.onclick=e=>{e.preventDefault();showKeyShortcuts()};const showKeyShortcuts=()=>{window.location="#key-shortcuts";renderKeyShortcuts()};const hideKeyShortcuts=()=>{window.location="#";editor.focus()};document.body.onkeydown=e=>{if(e.keyCode===27)hideKeyShortcuts();else if(e.ctrlKey&&e.keyCode===190)showKeyShortcuts()};
const saveToFile=()=>{const content=editor.getValue();const mimeType="text";const fileName=prompt("Enter filename","extext-"+getTimestamp()+".html");if(!fileName)return;const a=document.createElement("a");const blob=new Blob([content],{type:mimeType});const url=URL.createObjectURL(blob);a.setAttribute("href",url);a.setAttribute("download",fileName);a.click()};const renderLayoutBtn=index=>layoutBtn.innerHTML=`${LAYOUT_EMOJIS[index]} ${capCamel(LAYOUTS[index])}`;
const toggleLayout=()=>{const {layout}=userConfig;const index=(LAYOUTS.findIndex(a=>a===layout)+1)%LAYOUTS.length;userConfig.layout=LAYOUTS[index];document.body.className=userConfig.layout;renderLayoutBtn(index)};
const editor=CodeMirror.fromTextArea(c,{autofocus:true,mode:{name:"htmlmixed",globalVars:true},theme:"material-darker",keyMap:"sublime",lineNumbers:true,lineWrapping:true,indentUnit:2,tabSize:2,indentWithTabs:false,smartIndent:false,matchBrackets:true,autoCloseBrackets:true,autoCloseTags:true,matchTags:true,styleActiveLine:true,highlightSelectionMatches:{minChars:2,showToken:/\w/,annotateScrollbar:true,style:"matchhighlight"},extraKeys:{"Cmd-'":runCode,"Ctrl-'":runCode,"Cmd-S":runCode,"Ctrl-S":runCode,
"Cmd-Enter":runCode,"Ctrl-Enter":runCode,"Shift-Alt-Up":"duplicateLine","Shift-Alt-Down":"duplicateLine","Ctrl-.":showKeyShortcuts,"Ctrl-D":"deleteLine","Cmd-D":"deleteLine","Ctrl-Space":"autocomplete"}});run.onclick=()=>runCode();save.onclick=()=>saveToFile();layoutBtn.onclick=toggleLayout;const pad=n=>n>9?n:"0"+n;
const getTimestamp=()=>{const format="FullYear Month Date - Hours Minutes Seconds".split(" ");const date=new Date;return format.map(a=>!date["get"+a]?a:pad(date["get"+a]()+(a==="Month"?1:0))).join("")};
